// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// OrderDao is the data access object for table kmk_order.
type OrderDao struct {
	table   string       // table is the underlying table name of the DAO.
	group   string       // group is the database configuration group name of current DAO.
	columns OrderColumns // columns contains all the column names of Table for convenient usage.
}

// OrderColumns defines and stores column names for table kmk_order.
type OrderColumns struct {
	Id               string // id
	PlatformOrderId  string // 第三方平台交易id，例如支付宝、微信...
	ConsumerId       string // 消费者id
	InOutType        string // 收支类型：1收入，2支出
	Amount           string // 交易金额，也就是实际成交金额
	CouponAmount     string // 优惠减免金额
	CouponConfig     string // 优惠配置详细数据
	OrderAmount      string // 订单金额，也就是优惠前的金额
	ProductName      string // 产品名称，例如充电等
	TradeScene       string // 交易场景
	CreatedAt        string // 订单创建时间
	RefundAmount     string // 退款金额
	TradeAt          string // 交易时间
	State            string // 订单状态：1待支付、2支付中、4已支付、8取消支付、16交易完成、32退款中、64已退款、128支付超时、256已关闭
	AuditState       string // 审核状态：0待审核、1已通过、-1不通过
	AuditReplyMsg    string // 审核回复，审核状态为不通过时必须要有审核回复
	AuditAt          string // 审核时间
	TradeSourceType  string // 交易源类型：1支付宝、2微信、4抖音、8银联
	TradeSource      string // 交易元数据
	ProductNumber    string // 产品编号
	UnionMainId      string // 应用关联主体ID
	SubAccountScheme string // 分账方案，默认空，空代表分账结束，无需分账
	AppId            string // 应用appId
	UnionMainType    string // 应用关联主体类型, 也就是userType的类型
	MerchantId       string // 商家id
}

// orderColumns holds the columns for table kmk_order.
var orderColumns = OrderColumns{
	Id:               "id",
	PlatformOrderId:  "platform_order_id",
	ConsumerId:       "consumer_id",
	InOutType:        "in_out_type",
	Amount:           "amount",
	CouponAmount:     "coupon_amount",
	CouponConfig:     "coupon_config",
	OrderAmount:      "order_amount",
	ProductName:      "product_name",
	TradeScene:       "trade_scene",
	CreatedAt:        "created_at",
	RefundAmount:     "refund_amount",
	TradeAt:          "trade_at",
	State:            "state",
	AuditState:       "audit_state",
	AuditReplyMsg:    "audit_reply_msg",
	AuditAt:          "audit_at",
	TradeSourceType:  "trade_source_type",
	TradeSource:      "trade_source",
	ProductNumber:    "product_number",
	UnionMainId:      "union_main_id",
	SubAccountScheme: "sub_account_scheme",
	AppId:            "app_id",
	UnionMainType:    "union_main_type",
	MerchantId:       "merchant_id",
}

// NewOrderDao creates and returns a new DAO object for table data access.
func NewOrderDao(proxy ...dao_interface.IDao) *OrderDao {
	var dao *OrderDao
	if len(proxy) > 0 {
		dao = &OrderDao{
			group:   proxy[0].Group(),
			table:   proxy[0].Table(),
			columns: orderColumns,
		}
		return dao
	}

	return &OrderDao{
		group:   "default",
		table:   "kmk_order",
		columns: orderColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *OrderDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *OrderDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *OrderDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *OrderDao) Columns() OrderColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *OrderDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *OrderDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) dao_interface.DaoConfig {
	daoConfig := dao_interface.DaoConfig{
		Dao:   dao,
		DB:    dao.DB(),
		Table: dao.table,
		Group: dao.group,
		Model: dao.DB().Model(dao.Table()).Safe().Ctx(ctx),
	}

	if len(cacheOption) == 0 {
		daoConfig.CacheOption = daoctl.MakeDaoCache(dao.Table())
		daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
	} else {
		if cacheOption[0] != nil {
			daoConfig.CacheOption = cacheOption[0]
			daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
		}
	}

	daoConfig.Model = daoctl.RegisterDaoHook(daoConfig.Model)

	return daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *OrderDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
